stages:
  - Review
  - Build
  - Publish

cache:
  key:
    files:
      - yarn.lock
  paths:
    - .yarn

### Jobs ###
test:
  image: node:lts-alpine
  stage: Review
  tags:
    - docker-executer
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - yarn --immutable
    - yarn lint

sonar-scan:
  stage: Review
  # List of tags that are used to select a runner
  tags:
    - docker-executer
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
  variables:
    # SONAR_HOST_URL # GitLab CI/CD group-level variable
    # SONAR_TOKEN # GitLab CI/CD group-level variable
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  script:
    - sonar-scanner
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  retry: 2

# TODO: changesets-gitlab needs a full access personal access token (which is a no no) checkout https://github.com/rx-ts/changesets-gitlab/pull/23
changesets-check:
  image: node:17
  stage: Review
  tags:
    - docker-executer
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - yarn --immutable
    - yarn changesets-gitlab comment
  variables:
    GITLAB_CI_USER_NAME: "HosseinAgha"

build:
  interruptible: true
  stage: Build
  tags:
    - shell-executer # Directly run on CI worker node instead of containers to preserve docker layer cache between builds
  cache: [] # we use docker cache to build
  variables:
    # for job
    COMPOSE_DOCKER_CLI_BUILD: "1"
    DOCKER_BUILDKIT: "1"
    AWS_ACCESS_KEY_ID: ${AWS_ECR_READWRITE_ACCESS_KEY} # GitLab CI/CD group-level variable
    AWS_SECRET_ACCESS_KEY: ${AWS_ECR_READWRITE_SECRET} # GitLab CI/CD group-level variable
    AWS_DEFAULT_REGION: eu-central-1 # If other than eu-central-1, Could not connect to the endpoint URL: "https://api.ecr-public.eu-central-1.amazonaws.com/"
  script:
    - docker image build . -t 575302467300.dkr.ecr.eu-central-1.amazonaws.com/avidkit:${CI_COMMIT_SHORT_SHA}
    - echo "--- successfully built the following docker image tag ${CI_COMMIT_SHORT_SHA} ---"
    - aws ecr get-login-password | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY}
    - docker image push 575302467300.dkr.ecr.eu-central-1.amazonaws.com/avidkit:${CI_COMMIT_SHORT_SHA}
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "main" && $CI_COMMIT_MESSAGE !~ /^Merge branch 'changeset-release\/main'.*/
  environment:
    name: avidkit-storybook-production
    deployment_tier: production
    url: https://avidkit.avidcloud.io
    action: prepare

deploy:
  image: avidcloud/kubectl:latest
  stage: Publish
  tags:
    - docker-executer
  cache: []
  variables: {}
  script:
    - cd .storybook
    - kubectl config use-context avidarvand/avidkit:avidkit-aws-cluster
    - kubectl config set-context --current --namespace=avidkit
    - envsubst < kubernetes.yml | kubectl apply --record -f -
    - kubectl wait --for=condition=available --timeout=200s deployment/storybook
    - kubectl wait --for=condition=ready --timeout=200s pod -l app=storybook,commit-short-sha=commit_${CI_COMMIT_SHORT_SHA}
    - echo "--- successfully deployed ${TW_SERVICE_NAME} for the commit ${CI_COMMIT_SHORT_SHA} ---"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "main" && $CI_COMMIT_MESSAGE !~ /^Merge branch 'changeset-release\/main'.*/
  environment:
    name: avidkit-storybook-production
    deployment_tier: production
    url: https://avidkit.avidcloud.io

changesets-version-publish:
  stage: Publish
  image: avidcloud/kubectl:v1.19.10
  needs: []
  tags:
    - docker-executer
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "main"'
  script:
    - yarn --immutable
    - yarn changesets-gitlab
  variables:
    YARN_ENABLE_IMMUTABLE_INSTALLS: "false"
    GITLAB_CI_USER_NAME: "HosseinAgha"
    NPM_TOKEN: "${CI_JOB_TOKEN}"
    INPUT_TITLE: "Release Packages"
    INPUT_PUBLISH: yarn release
    INPUT_VERSION: yarn update-versions
